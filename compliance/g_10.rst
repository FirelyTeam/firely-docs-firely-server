.. _compliance_g_10:

21th Century Cures Act, §170.315 g(10)
======================================

Overview
^^^^^^^^

   .. note::

     Firely Server v5 has been officially certified against §170.315 g(10) 2015 Cures Edition Health IT. For more details, see our `CHPL listing <https://chpl.healthit.gov/#/organizations/developers/2144>`_.
     Mandatory disclosures can be found `here <https://fire.ly/g10-certification/>`_.

Firely Server can be used out-of-the-box to comply with important criteria for the 21th Century Cures Act. 
See the `Standard referenced <https://www.healthit.gov/test-method/standardized-api-patient-and-population-services#test_procedure>`_ section provided by the ONC for a full list of standards working in combination to provide an API conforming to §170.315 g(10) 2015 Cures Edition Health IT.

See `How to Test Firely Server on Inferno <https://fire.ly/ebook-how-to-test-firely-server-on-inferno/>`_ for more information on how to pass the official 21st Century Cures Act test. 

See :ref:`firely_auth_introduction` for details on how to configure a client to interact with Firely Server and Firely Auth.

§170.315 g(10) APIs
^^^^^^^^^^^^^^^^^^^

The g(10) criteria describes the interaction of multiple ImplementationGuides, namely:

* SMART App Launch
* Bulk Data Access
* US Core

Together these ImplementationGuides form a coherient set of APIs allowing to build different APIs:

* Patient APIs
SMART App Launch allows Patients to launch an App as a standalone application to request data from a FHIR server in their name. Using US Core-conformant resources different data categories can be exposed as an EHR in this case. US Core defines diverse SearchParameters that can be used to find data in the EHR.

* Practitioner APIs
SMART App Launch allows Practitioners to start a new workflow outside of the EHR by using additional apps that interact with the FHIR server. Practitioners can launch the app within the EHR and interact with data for a single Patient or a group of Patients, if authorization is granted.

* Multi-Patient APIs
For system-to-system interactions a Multi-Patient API allows clients to export Patient records in bulk.

Supported versions
^^^^^^^^^^^^^^^^^^

Firely provides official support for the following versions of the ImplementationGuides described above to implement these APIs:

 ================== ========= ========================================
 US Core Version    Status    References                                                                 
 ================== ========= ========================================                                                                             
  US Core 3.1.1      ✅         http://hl7.org/fhir/us/core/STU3.1.1/                                 
  US Core 4.0.0      ✅         http://hl7.org/fhir/us/core/STU4/      
  US Core 5.0.1      ✅         http://hl7.org/fhir/us/core/STU5.0.1/ 
 ================== ========= ========================================

* All versions of SMART on FHIR and Bulk Data Access approved for the `SVAP Process in 2022 <https://www.healthit.gov/topic/standards-version-advancement-process-svap>`_ are supported by Firely Server:

 ======================== ======== ============================================
 ImplementationGuide       Status   References                                                                 
 ======================== ======== ============================================                                                                             
  Bulk Data Access 1.0.0   ✅        http://hl7.org/fhir/uv/bulkdata/STU1.0.1                               
  Bulk Data Access 2.0.0   ✅        http://hl7.org/fhir/uv/bulkdata/STU2     
  SMART on FHIR 1.0.0      ✅        http://hl7.org/fhir/smart-app-launch/1.0.0
  SMART on FHIR 2.0.0      ✅        http://hl7.org/fhir/smart-app-launch/STU2 
 ======================== ======== ============================================  

Conformance & Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Firely Server provides full profile and interaction support as defined in `"Conforming to US Core" <https://hl7.org/fhir/us/core/general-requirements.html#profile-support--interaction-support>`_:
  
  * Firely Server can be populated with resources conforming to US Core
  * All elements defined as must-support by the implementation guide are supported
  * All references between FHIR resources defined as must-support by the implementation guide are supported
  * All search and CRUD interactions defined by US Core are supported, including optional search parameters

* All StructureDefinitions for profiles and extensions (v3.1.1) are loaded by default in the standard SQLite administration database of Firely Server. No additional configuration needed in order to validate against these conformance resources.

* A mapping between USCDI and the US Core profiles can be found in the `US Core ImplementationGuide <http://build.fhir.org/ig/HL7/US-Core/uscdi.html>`_.

Known Limitations
^^^^^^^^^^^^^^^^^

* In order to validate resources claiming to conform to US Core, it is necessary to configure Firely Server to use an external terminology server incl. support for expanding SNOMED CT and LOINC ValueSets. See :ref:`feature_terminology`.
* Certain parameters are not implemented for the ``$docref`` operation on DocumentReference resources. See :ref:`feature_docref` for more details.
  
Test Data
^^^^^^^^^

Firely provides test data covering all US-Core profiles and all elements marked as Must-Support. In order to load all examples, two transaction bundles need to be posted against the base endpoint of Firely Server. The following Postman collection provides you with the bundles itself, and the bundle entries as individual PUT requests.

.. raw:: html

  <div class="postman-run-button"
  data-postman-action="collection/fork"
  data-postman-var-1="24489118-e7d6d401-f82e-4695-a434-3d40399e2d2c"
  data-postman-collection-url="entityId=24489118-e7d6d401-f82e-4695-a434-3d40399e2d2c&entityType=collection&workspaceId=822b68d8-7e7d-4b09-b8f1-68362070f0bd"
  data-postman-param="env%5BFirely%20Server%20Public%5D=W3sia2V5IjoiQkFTRV9VUkwiLCJ2YWx1ZSI6Imh0dHBzOi8vc2VydmVyLmZpcmUubHkvIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQifV0="></div>
  <script type="text/javascript">
    (function (p,o,s,t,m,a,n) {
      !p[s] && (p[s] = function () { (p[t] || (p[t] = [])).push(arguments); });
      !o.getElementById(s+t) && o.getElementsByTagName("head")[0].appendChild((
        (n = o.createElement("script")),
        (n.id = s+t), (n.async = 1), (n.src = m), n
      ));
    }(window, document, "_pm", "PostmanRunObject", "https://run.pstmn.io/button.js"));
  </script>

The following steps are necessary in order to execute the test collection against our own Firely Server instance:

#. Select "Fork Collection" or "View collection" in the Postman dialog

    .. image:: ../images/Compliance_ForkTestCollectionPostman.png
       :align: center
       :width: 500

#. Sign-In with your Postman account

#. `Create a new Postman environment <https://learning.postman.com/docs/sending-requests/managing-environments/#creating-environments>`_ with a "BASE_URL" variable and adjust the URL to your server endpoint

    .. image:: ../images/Compliance_EnvironmentTestCollectionPostman.png
       :align: center
       :width: 800

#. Make sure that the newly created environment is selected as the active environment

#. Open the collection "Firely Server - US Core Tests"

    .. image:: ../images/Compliance_USCoreTestCollectionPostman.png
       :align: center
       :width: 500

#. Execute the transaction request, the expected response is "HTTP 200 - OK".
